1) DEFINIR INTERFACE
2) DEFINIR COMPONENTS

-------------------------------------------------------------------------------

Object
------

Object.Load()
  - load object
  - store in context
  - return id
Object.Create()
  - create object
  - store in context
  - return id
Object.Lock()
Object.Release()
Object.Information()
  - build stat
  - return stat
Object.Destroy()
  - load object
  - destroy it
  - return
Object.Close()
  - destroy context
  - return
Object.Commit()
  - seal object
  - push modifications
  - return

File
----

File.Read()
File.Write()

Directory
---------

Directory.Exist()
  - lookup name
  - return true if found
Directory.Consult()
  - fetch the entries
  - return them
Directory.Lookup()
  - lookup name
  - return address
Directory.Add()
  - verify that the entry does not exist
  - add the entry
  - return
Directory.Remove()
  - remove the entry
  - return
Directory.Update()
  - find the entry
  - update the address
  - return
Directory.Rename()
  - find the entry
  - rename it
  - return

Link
----

Link.Bind()
Link.Resolve()

------------------------------------------------------------------------------
User
----

User.Load(name, &id)

User.Store()

Group
-----

Group.Load(name, &id)

Group.Store(id)

Community
---------

Community.Request() -> change an object

System
------

System.Create()
System.Information()

System.Authenticate()

-------------------------------------------------------------------------------

XXX ca devrait etre simple de ramener une ancienne version.
XXX ca devrait etre simple de modifier une ancienne version pour quelle
    devienne la courante bien que cette operation revient a remettre
    une ancienne au premier plan pour ensuite la modifier. vu que ca reste
    dans un meme contexte, ca revient completement au meme.
XXX ca devrait etre possible d'avoir plusieurs sous-contexts dans un
    context, via un 'name' par exemple
XXX pouvoir recuperer des infos sur les contexts encore en vie: taux d'upload
    etc.
XXX 1 thread par contexte
XXX contexts look like transactions but are not atomic. they are just
    construct for performing mutliple operations on the same object(s).
XXX rename() revient a locker les directories et les update.
