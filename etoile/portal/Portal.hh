#ifndef ETOILE_PORTAL_PORTAL_HH
# define ETOILE_PORTAL_PORTAL_HH

# include <elle/types.hh>

# include <reactor/fwd.hh>
# include <reactor/network/fwd.hh>

# include <etoile/portal/Application.hh>

# include <lune/Phrase.hh>

# include <elle/idiom/Close.hh>
#  include <map>
# include <elle/idiom/Open.hh>

namespace etoile
{
  ///
  /// this namespace contains everything related to making the Etoile's
  /// interface accessible through messaging.
  ///
  /// note that in order to be used, the client application must provide
  /// a phrase which is generated by the user's instance of Infinit.
  ///
  namespace portal
  {

    ///
    /// this class is responsible for managing the external applications
    /// connecting to Etoile and triggering operations.
    ///
    class Portal
    {
    public:
      //
      // types
      //
      typedef std::pair<elle::network::TCPSocket*, Application*>       Value;
      typedef std::map<elle::network::TCPSocket*, Application*>        Container;
      typedef Container::iterator                               Iterator;
      typedef Container::const_iterator                         Scoutor;

      //
      // static methods
      //
      static elle::Status       Initialize();
      static elle::Status       Clean();

      static elle::Status       Add(Application*);
      static elle::Status       Retrieve(elle::network::TCPSocket*,
                                         Application*&);
      static elle::Status       Remove(elle::network::TCPSocket*);

      static elle::Status       Show(const elle::Natural32 = 0);

      static void accept();

      //
      // static callbacks
      //
      static elle::Status       Connection(elle::network::TCPSocket*);
      static elle::Status       Authenticate(const elle::String&);
      static elle::Status       Prolog();
      static elle::Status       Epilog();

      //
      // static attributes
      //
      static Container applications;
      static reactor::network::TCPServer* server;
      static reactor::Thread* acceptor;
      static lune::Phrase phrase;
    };

  }
}

#endif
