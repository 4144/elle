diff --git a/libs/context/build/Jamfile.v2 b/libs/context/build/Jamfile.v2
index f9fe0ba..37bf623 100644
--- a/libs/context/build/Jamfile.v2
+++ b/libs/context/build/Jamfile.v2
@@ -27,9 +27,10 @@ project boost/context
 local rule default_binary_format ( )
 {
     local tmp = elf ;
-    if [ os.name ] = "MACOSX" { tmp = mach-o ; }
-    if [ os.name ] = "NT" { tmp = pe ; }
-    if [ os.name ] = "AIX" { tmp = xcoff ; }
+    if <target-os>windows { tmp = pe ; }
+    else if [ os.name ] = "MACOSX" { tmp = mach-o ; }
+    else if [ os.name ] = "NT" { tmp = pe ; }
+    else if [ os.name ] = "AIX" { tmp = xcoff ; }
     return $(tmp) ;
 }
 
@@ -46,7 +47,8 @@ feature.set-default binary-format : [ default_binary_format ] ;
 local rule default_abi ( )
 {
     local tmp = sysv ;
-    if [ os.name ] = "NT" { tmp = ms ; }
+    if <target-os>windows { tmp = ms ; }
+    else if [ os.name ] = "NT" { tmp = ms ; }
     else if [ os.platform ] = "ARM" { tmp = aapcs ; }
     else if [ os.platform ] = "MIPS" { tmp = o32 ; }
     return $(tmp) ;
@@ -77,6 +79,16 @@ actions gas64
     cpp -x assembler-with-cpp "$(>)" | as --64 -o "$(<)"
 }
 
+actions gasmingw32
+{
+    i686-w64-mingw32-g++ -S -x assembler-with-cpp "$(>)" | i686-w64-mingw32-as --32 -o "$(<)"
+}
+
+actions gasmingw64
+{
+    x86_64-w64-mingw32-g++ -S -x assembler-with-cpp "$(>)" | x86_64-w64-mingw32-as --64 -o "$(<)"
+}
+
 actions gasx32
 {
     cpp -x assembler-with-cpp "$(>)" | as --x32 -o "$(<)"
@@ -577,6 +589,18 @@ alias asm_context_sources
    ;
 # X86/MS/PE
 alias asm_context_sources
+    : [ make asm/make_i386_ms_pe_gas.o : asm/make_i386_ms_pe_gas.S : @gasmingw32 ]
+      [ make asm/jump_i386_ms_pe_gas.o : asm/jump_i386_ms_pe_gas.S : @gasmingw32 ]
+      dummy.cpp
+    : <abi>ms
+      <address-model>32
+      <architecture>x86
+      <binary-format>pe
+      <target-os>windows
+      <toolset>gcc
+    ;
+
+alias asm_context_sources
    : [ make asm/make_i386_ms_pe_masm.o : asm/make_i386_ms_pe_masm.asm : @masm ]
      [ make asm/jump_i386_ms_pe_masm.o : asm/jump_i386_ms_pe_masm.asm : @masm ]
      dummy.cpp
@@ -584,6 +608,7 @@ alias asm_context_sources
      <address-model>32
      <architecture>x86
      <binary-format>pe
+     <toolset>msvc
    ;
 
 alias asm_context_sources
@@ -711,6 +736,18 @@ alias asm_context_sources
    ;
 # X86_64/MS/PE
 alias asm_context_sources
+    : [ make asm/make_x86_64_ms_pe_gas.o : asm/make_x86_64_ms_pe_gas.S : @gasmingw64 ]
+      [ make asm/jump_x86_64_ms_pe_gas.o : asm/jump_x86_64_ms_pe_gas.S : @gasmingw64 ]
+      dummy.cpp
+    : <abi>ms
+      <address-model>64
+      <architecture>x86
+      <binary-format>pe
+      <target-os>windows
+      <toolset>gcc
+    ;
+
+alias asm_context_sources
    : [ make asm/make_x86_64_ms_pe_masm.o : asm/make_x86_64_ms_pe_masm.asm : @masm64 ]
      [ make asm/jump_x86_64_ms_pe_masm.o : asm/jump_x86_64_ms_pe_masm.asm : @masm64 ]
      dummy.cpp
@@ -718,6 +755,7 @@ alias asm_context_sources
      <address-model>64
      <architecture>x86
      <binary-format>pe
+     <toolset>msvc
    ;
 
 alias asm_context_sources
diff --git a/libs/context/src/asm/jump_i386_ms_pe_gas.S b/libs/context/src/asm/jump_i386_ms_pe_gas.S
new file mode 100644
index 0000000..4505f63
--- /dev/null
+++ b/libs/context/src/asm/jump_i386_ms_pe_gas.S
@@ -0,0 +1,162 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+            http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/********************************************************************
+ *                                                                  *
+ *  --------------------------------------------------------------  *
+ *  |    0    |    1    |    2    |    3    |    4     |    5    |  *
+ *  --------------------------------------------------------------  *
+ *  |    0h   |   04h   |   08h   |   0ch   |   010h   |   014h  |  *
+ *  --------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw| fc_strg |fc_deallo|  limit   |   base  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |    6    |    7    |    8    |                              |  *
+ *  --------------------------------------------------------------  *
+ *  |   018h  |   01ch  |   020h  |                              |  *
+ *  --------------------------------------------------------------  *
+ *  | fc_seh  |   EDI   |   ESI   |                              |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |    9    |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |  024h   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |   EBX   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |   10    |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |  028h   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |   EBP   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |   11    |    12   |    13   |    14   |    15   |          |  *
+ *  --------------------------------------------------------------  *
+ *  |   EIP   |   EXIT  |   034h  |   038h  |   03ch  |          |  *
+ *  --------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw|         | SEH NXT |SEH HNDLR|          |  *
+ *  --------------------------------------------------------------  *
+ *                                                                  *
+ * *****************************************************************/
+
+ .file "jump_i386_ms_pe_gas.S"
+ .text
+ .p2align 4,,15
+ .globl _jump_fcontext
+ .def   _jump_fcontext; .scl    2;  .type   32; .endef
+_jump_fcontext:
+    /* fourth arg of jump_fcontext() == flag indicating preserving FPU */
+    movl    0x10(%esp), %ecx
+
+    pushl   %ebp    /* save EBP */
+    pushl   %ebx    /* save EBX */
+    pushl   %esi    /* save ESI */
+    pushl   %edi    /* save EDI */
+
+    /* load NT_TIB into ECX */
+    movl    %fs:0x18,  %edx
+
+    /* load current SEH exception list */
+    movl    (%edx),     %eax
+    pushl   %eax
+
+    /* load current stack base */
+    movl    0x04(%edx), %eax
+    pushl   %eax
+
+    /* load current stack limit */
+    movl    0x08(%edx), %eax
+    pushl   %eax
+
+    /* load current deallocation stack */
+    movl    0xe0c(%edx),%eax
+    pushl   %eax
+
+    /* load fiber local storage */
+    movl    0x10(%edx), %eax
+    pushl   %eax
+
+    /* prepare stack for FPU */
+    leal    -0x08(%esp),%esp
+
+    /* test for flag preserve_fpu */
+    testl   %ecx,       %ecx
+    je      nxt1
+
+    /* save MMX control- and status-word */
+    stmxcsr (%esp)
+    /* save x87 control-word */
+    fnstcw  0x04(%esp)
+
+nxt1:
+    /* first arg of jump_fcontext() == context jumping from */
+    movl    0x30(%esp),%eax
+
+    /* store ESP (pointing to context-data) in EAX */
+    movl    %esp,       (%eax)
+
+    /* second arg of jump_fcontext() == context jumping to */
+    movl    0x34(%esp),%edx
+
+    /* third arg of jump_fcontext() == value to be returned after jump */
+    movl    0x38(%esp),%eax
+
+    /* restore ESP (pointing to context-data) from EDX */
+    movl    %edx,       %esp
+
+    /* test for flag preserve_fpu */
+    testl   %ecx,       %ecx
+    je      nxt2
+
+    /* restore MMX control- and status-word */
+    ldmxcsr (%esp)
+    /* restore x87 control-word */
+    fldcw   0x04(%esp)
+
+nxt2:
+    /* prepare stack for FPU */
+    leal    0x08(%esp), %esp
+
+    /* load NT_TIB into ECX */
+    movl    %fs:0x18,  %edx
+
+    /* restore fiber local storage */
+    popl    %ecx
+    movl    %ecx,       0x10(%edx)
+
+    /* restore current deallocation stack */
+    popl    %ecx
+    movl    %ecx,       0xe0c(%edx)
+
+    /* restore current stack limit */
+    popl    %ecx
+    movl    %ecx,       0x08(%edx)
+
+    /* restore current stack base */
+    popl    %ecx
+    movl    %ecx,       0x04(%edx)
+
+    /* restore current SEH exception list */
+    popl    %ecx
+    movl    %ecx,       (%edx)
+
+    popl    %edi        /* save EDI */
+    popl    %esi        /* save ESI */
+    popl    %ebx        /* save EBX */
+    popl    %ebp        /* save EBP */
+
+    /* restore return-address */
+    popl    %edx
+
+    /* use value in EAX as return-value after jump
+       use value in EAX as first arg in context function */
+    movl    %eax,       0x04(%esp)
+
+    /* indirect jump to context */
+    jmp    *%edx
\ No newline at end of file
diff --git a/libs/context/src/asm/jump_x86_64_ms_pe_gas.S b/libs/context/src/asm/jump_x86_64_ms_pe_gas.S
new file mode 100644
index 0000000..3da96a6
--- /dev/null
+++ b/libs/context/src/asm/jump_x86_64_ms_pe_gas.S
@@ -0,0 +1,221 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+            http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/***************************************************************************************
+ *  ---------------------------------------------------------------------------------- *
+ *  |    0    |    1    |                                                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0x0   |   0x4   |                                                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    <indicator>    |                                                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    2    |    3    |    4     |    5    |    6    |    7    |    8    |    9    | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |   0x20  |   0x24  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |                          SEE registers (XMM6-XMM15)                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   10    |   11    |    12    |    13   |    14   |    15   |    16   |    17   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |   0x40  |   0x44  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |                          SEE registers (XMM6-XMM15)                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    18   |    19   |    20   |    21    |    22   |    23   |    24   |    25   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0x48  |   0x4c  |   0x50  |   0x54   |   0x58  |   0x5c  |  0x60   |   0x64  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |                          SEE registers (XMM6-XMM15)                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    26   |    27   |    28    |   29    |    30   |    31   |    32   |    33   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0x68  |   0x6c  |   0x70   |   0x74  |   0x78  |   0x7c  |   0x80  |   0x84  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |                          SEE registers (XMM6-XMM15)                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    34    |   35   |    36    |    37   |    38   |    39   |    40   |    41   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0x88   |  0x8c  |   0x90   |   0x94  |   0x98  |   0x9c  |   0xa0  |   0xa4  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |                          SEE registers (XMM6-XMM15)                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    42   |    43   |    44    |    45   |    46   |    47   |    48   |    49   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0xa8  |   0xac  |   0xb0   |   0xb4  |   0xb8  |   0xbc  |   0xc0  |   0xc4  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  | fc_mxcsr|fc_x87_cw|     <alignment>    |      fbr_strg     |      fc_dealloc   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    50   |   51    |    52    |    53   |    54   |    55   |    56   |    57   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0xc8  |  0xcc   |   0xd0   |   0xd4  |   0xd8  |   0xdc  |   0xe0  |   0xe4  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |      limit        |       base         |      R12          |        R13        | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    58   |    59   |    60   |    61    |    62   |    63   |    64   |    65   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0xe8  |   0xec  |   0xf0  |   0xf4   |   0xf8  |   0xfc  |  0x100  |  0x104  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |        R14        |        R15         |       RDI         |       RSI         | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    66   |   67    |    68    |   69    |    70   |  71     |    72   |    73   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |  0x108  |  0x10c  |  0x110   |  0x114  |  0x118  |  0x11c  |  0x120  |  0x124  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |        RBX        |         RBP        |        RIP        |       EXIT        | *
+ *  ---------------------------------------------------------------------------------- *
+ **************************************************************************************/
+
+ .file  "jump_x86_64_ms_pe_gas.S"
+ .text
+ .p2align 4,,15
+ .globl jump_fcontext
+ .def   jump_fcontext;  .scl    2;  .type   32; .endef
+ .seh_proc  jump_fcontext
+jump_fcontext:
+ .seh_endprologue
+
+    pushq   %rbp        /* save RBP */
+    pushq   %rbx        /* save RBX */
+    pushq   %rsi        /* save RSI */
+    pushq   %rdi        /* save RDI */
+    pushq   %r15        /* save R15 */
+    pushq   %r14        /* save R14 */
+    pushq   %r13        /* save R13 */
+    pushq   %r12        /* save R12 */
+
+    /* load NT_TIB */
+    movq    gs:(0x30),  %r10
+    /* save current stack base */
+    movq    0x08(%r10), %rax
+    pushq   %rax
+    /* save current stack limit */
+    movq    0x10(%r10), %rax
+    pushq   %rax
+    /* save current deallocation stack */
+    movq    0x1478(%r10),%rax
+    pushq   %rax
+    /* save fiber local storage */
+    movq    0x18(%r10), %rax
+    pushq   %rax
+
+    /* prepare stack for FPU */
+    leaq    -0xa8(%rsp),%rsp
+
+    /* test for flag preserve_fpu */
+    testq   %r9,        %r9
+    je      nxt1
+
+    /* save MMX control- and status-word */
+    stmxcsr 0xa0(%rsp)
+    /* save x87 control-word */
+    fnstcw  0xa4(%rsp)
+
+    /* save XMM storage */
+    movaps  %xmm6,      (%rsp)
+    movaps  %xmm7,      0x10(%rsp)
+    movaps  %xmm8,      0x20(%rsp)
+    movaps  %xmm9,      0x030(%rsp)
+    movaps  %xmm10,     0x040(%rsp)
+    movaps  %xmm11,     0x050(%rsp)
+    movaps  %xmm12,     0x060(%rsp)
+    movaps  %xmm13,     0x070(%rsp)
+    movaps  %xmm14,     0x080(%rsp)
+    movaps  %xmm15,     0x090(%rsp)
+
+nxt1:
+    /* set R10 to zero */
+    xorq    %r10,       %r10
+    /* set indicator */
+    pushq   %r10
+
+    /* store RSP (pointing to context-data) in RCX */
+    movq    %rsp,       (%rcx)
+
+    /* restore RSP (pointing to context-data) from RDX */
+    movq    %rdx,       %rsp
+
+    /* load indicator */
+    popq    %r10
+
+    /* test for flag preserve_fpu */
+    testq   %r9,        %r9
+    je      nxt2
+
+    /* restore MMX control- and status-word */
+    ldmxcsr 0xa0(%rsp)
+    /* save x87 control-word */
+    fldcw   0xa4(%rsp)
+
+    /* restore XMM storage */
+    movaps  (%rsp),     %xmm6
+    movaps  0x010(%rsp),%xmm7
+    movaps  0x020(%rsp),%xmm8
+    movaps  0x030(%rsp),%xmm9
+    movaps  0x040(%rsp),%xmm10
+    movaps  0x050(%rsp),%xmm11
+    movaps  0x060(%rsp),%xmm12
+    movaps  0x070(%rsp),%xmm13
+    movaps  0x080(%rsp),%xmm14
+    movaps  0x090(%rsp),%xmm15
+
+nxt2:
+    /* set offset of stack */
+    movq    0xa8,       %rcx
+    /* test for indicator */
+    testq   %r10,       %r10
+    je      nxt3
+
+    addq    0x8,        %rcx
+
+nxt3:
+    /* prepare stack for FPU */
+    leaq    (%rsp,%rcx),%rsp
+
+    /* load NT_TIB */
+    movq    gs:(0x30),  %r10
+    /* restore fiber local storage */
+    popq    %rax
+    movq    %rax,       0x18(%r10)
+    /* restore deallocation stack */
+    popq    %rax
+    movq    %rax,       0x1478(%r10)
+    /* restore stack limit */
+    popq    %rax
+    movq    %rax,       0x10(%r10)
+    /* restore stack base */
+    popq    %rax
+    movq    %rax,       0x08(%r10)
+
+    popq    %r12        /* restore R12 */
+    popq    %r13        /* restore R13 */
+    popq    %r14        /* restore R14 */
+    popq    %r15        /* restore R15 */
+    popq    %rdi        /* restore RDI */
+    popq    %rsi        /* restore RSI */
+    popq    %rbx        /* restore RBX */
+    popq    %rbp        /* restore RBP */
+
+    /* restore return-address */
+    popq    %r10
+
+    /* use third arg as return-value after jump */
+    movq    %r8,        %rax
+    /* use third arg as first arg in context function */
+    movq    %r8,        %rcx
+
+    /* indirect jump to context */
+    jmp     *%r10
+ .seh_endproc
\ No newline at end of file
diff --git a/libs/context/src/asm/make_i386_ms_pe_gas.S b/libs/context/src/asm/make_i386_ms_pe_gas.S
new file mode 100644
index 0000000..7e24283
--- /dev/null
+++ b/libs/context/src/asm/make_i386_ms_pe_gas.S
@@ -0,0 +1,143 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+            http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/********************************************************************
+ *                                                                  *
+ *  --------------------------------------------------------------  *
+ *  |    0    |    1    |    2    |    3    |    4     |    5    |  *
+ *  --------------------------------------------------------------  *
+ *  |    0h   |   04h   |   08h   |   0ch   |   010h   |   014h  |  *
+ *  --------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw| fc_strg |fc_deallo|  limit   |   base  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |    6    |    7    |    8    |                              |  *
+ *  --------------------------------------------------------------  *
+ *  |   018h  |   01ch  |   020h  |                              |  *
+ *  --------------------------------------------------------------  *
+ *  | fc_seh  |   EDI   |   ESI   |                              |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |    9    |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |  024h   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |   EBX   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |   10    |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |  028h   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  |   EBP   |                                                  |  *
+ *  --------------------------------------------------------------  *
+ *  --------------------------------------------------------------  *
+ *  |   11    |    12   |    13   |    14   |    15   |          |  *
+ *  --------------------------------------------------------------  *
+ *  |   EIP   |   EXIT  |   034h  |   038h  |   03ch  |          |  *
+ *  --------------------------------------------------------------  *
+ *  | fc_mxcsr|fc_x87_cw|         | SEH NXT |SEH HNDLR|          |  *
+ *  --------------------------------------------------------------  *
+ *                                                                  *
+ * *****************************************************************/
+
+ .file "make_i386_ms_pe_gas.S"
+ .text
+ .p2align 4,,15
+ .globl _make_fcontext
+ .def   _make_fcontext; .scl    2;  .type   32; .endef
+_make_fcontext:
+    /* first arg of make_fcontext() == top of context-stack */
+    movl    0x04(%esp), %eax
+
+    /* reserve space for first argument of context-function
+       rax might already point to a 16byte border */
+    leal    -0x08(%eax),%eax
+
+    /* shift address in EAX to lower 16 byte boundary */
+    andl    $-16,       %eax
+
+    /* reserve space for context-data on context-stack
+       size for fc_mxcsr .. EIP + return-address for context-function
+       on context-function entry: (ESP -0x4) % 8 == 0
+       additional space is required for SEH */
+    leal    -0x3c(%eax),%eax
+
+    /* first arg of make_fcontext() == top of context-stack */
+    movl    0x04(%esp), %ecx
+    /* save top address of context stack as 'base' */
+    movl    %ecx,       0x14(%eax)
+    /* second arg of make_fcontext() == size of context-stack */
+    movl    0x08(%esp), %edx
+    /* negate stack size for LEA instruction (== substraction) */
+    negl    %edx
+    /* compute bottom address of context stack (limit) */
+    leal    (%ecx,%edx),%ecx
+    /* save bottom address of context-stack as 'limit' */
+    movl    %ecx,       0x10(%eax)
+    /* save bottom address of context-stack as 'dealloction stack' */
+    movl    %ecx,       0x0c(%eax)
+
+    /* third arg of make_fcontext() == address of context-function */
+    movl    0x0c(%esp), %ecx
+    movl    %ecx,       0x2c(%eax)
+
+    /* save MMX control- and status-word */
+    stmxcsr (%eax)
+    /* save x87 control-word */
+    fnstcw  0x04(%eax)
+
+    /* compute abs address of label finish */
+    movl    $finish,    %ecx
+    /* save address of finish as return-address for context-function
+       will be entered after context-function returns */
+    movl    %ecx,       0x30(%eax)
+
+    /* traverse current seh chain to get the last exception handler installed by Windows
+       note that on Windows Server 2008 and 2008 R2, SEHOP is activated by default
+       the exception handler chain is tested for the presence of ntdll.dll!FinalExceptionHandler
+       at its end by RaiseException all seh-handlers are disregarded if not present and the
+       program is aborted */
+    movl    %fs:(0x0), %ecx
+
+walk:
+    /* load 'next' member of current SEH into EDX */
+    movl    (%ecx),     %edx
+    /* test if 'next' of current SEH is last (== 0xffffffff) */
+    incl    %edx
+    jz      found
+    decl    %edx
+    /* exchange content; ECX contains address of next SEH */
+    xchgl   %ecx,       %edx
+    /* inspect next SEH */
+    jmp     walk
+
+found:
+    /* load 'handler' member of SEH == address of last SEH handler installed by Windows */
+    movl    0x04(%ecx), %ecx
+    /* save address in ECX as SEH handler for context */
+    movl    %ecx,       0x3c(%eax)
+    /* set ECX to -1 */
+    movl    $0xffffffff,%ecx
+    /* save ECX as next SEH item */
+    movl    %ecx,       0x38(%eax)
+    /* load address of next SEH item */
+    leal    0x38(%eax),%ecx
+    /* save next SEH */
+    movl    %ecx,       0x18(%eax)
+
+    ret     /* return pointer to context-data */
+
+finish:
+    /* exit code is zero */
+    xorl    %eax,       %eax
+    movl    %eax,       (%esp)
+    /* exit application */
+    call    __exit
+    hlt
+
+.def   __exit; .scl    2;  .type   32; .endef  /* standard C library function */
\ No newline at end of file
diff --git a/libs/context/src/asm/make_x86_64_ms_pe_gas.S b/libs/context/src/asm/make_x86_64_ms_pe_gas.S
new file mode 100644
index 0000000..0010af7
--- /dev/null
+++ b/libs/context/src/asm/make_x86_64_ms_pe_gas.S
@@ -0,0 +1,151 @@
+/*
+            Copyright Oliver Kowalke 2009.
+   Distributed under the Boost Software License, Version 1.0.
+      (See accompanying file LICENSE_1_0.txt or copy at
+            http://www.boost.org/LICENSE_1_0.txt)
+*/
+
+/***************************************************************************************
+ *  ---------------------------------------------------------------------------------- *
+ *  |    0    |    1    |                                                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0x0   |   0x4   |                                                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    <indicator>    |                                                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    2    |    3    |    4     |    5    |    6    |    7    |    8    |    9    | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |   0x20  |   0x24  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |                          SEE registers (XMM6-XMM15)                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   10    |   11    |    12    |    13   |    14   |    15   |    16   |    17   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |   0x40  |   0x44  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |                          SEE registers (XMM6-XMM15)                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    18   |    19   |    20   |    21    |    22   |    23   |    24   |    25   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0x48  |   0x4c  |   0x50  |   0x54   |   0x58  |   0x5c  |  0x60   |   0x64  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |                          SEE registers (XMM6-XMM15)                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    26   |    27   |    28    |   29    |    30   |    31   |    32   |    33   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0x68  |   0x6c  |   0x70   |   0x74  |   0x78  |   0x7c  |   0x80  |   0x84  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |                          SEE registers (XMM6-XMM15)                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    34    |   35   |    36    |    37   |    38   |    39   |    40   |    41   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0x88   |  0x8c  |   0x90   |   0x94  |   0x98  |   0x9c  |   0xa0  |   0xa4  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |                          SEE registers (XMM6-XMM15)                            | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    42   |    43   |    44    |    45   |    46   |    47   |    48   |    49   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0xa8  |   0xac  |   0xb0   |   0xb4  |   0xb8  |   0xbc  |   0xc0  |   0xc4  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  | fc_mxcsr|fc_x87_cw|     <alignment>    |      fbr_strg     |      fc_dealloc   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    50   |   51    |    52    |    53   |    54   |    55   |    56   |    57   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0xc8  |  0xcc   |   0xd0   |   0xd4  |   0xd8  |   0xdc  |   0xe0  |   0xe4  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |      limit        |       base         |      R12          |        R13        | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    58   |    59   |    60   |    61    |    62   |    63   |    64   |    65   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |   0xe8  |   0xec  |   0xf0  |   0xf4   |   0xf8  |   0xfc  |  0x100  |  0x104  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |        R14        |        R15         |       RDI         |       RSI         | *
+ *  ---------------------------------------------------------------------------------- *
+ *  ---------------------------------------------------------------------------------- *
+ *  |    66   |   67    |    68    |   69    |    70   |  71     |    72   |    73   | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |  0x108  |  0x10c  |  0x110   |  0x114  |  0x118  |  0x11c  |  0x120  |  0x124  | *
+ *  ---------------------------------------------------------------------------------- *
+ *  |        RBX        |         RBP        |        RIP        |       EXIT        | *
+ *  ---------------------------------------------------------------------------------- *
+ **************************************************************************************/
+
+ .file  "make_x86_64_ms_pe_gas.S"
+ .text
+ .p2align 4,,15
+ .globl make_fcontext
+ .def   make_fcontext;  .scl    2;  .type   32; .endef
+ .seh_proc  make_fcontext
+/* generate function table entry in .pdata and unwind information in */
+make_fcontext:
+    /* .xdata for a function's structured exception handling unwind behavior */
+ .seh_endprologue
+
+    /* first arg of make_fcontext() == top of context-stack */
+    movq    %rcx,       %rax
+
+    /* reserve 32byte shadow-space for context-function */
+    subq    0x28,       %rax
+
+    /* shift address in RAX to lower 16 byte boundary
+       == pointer to fcontext_t and address of context stack */
+    andl    -16,        %rax
+
+    /* reserve space for context-data on context-stack
+       size for fc_mxcsr .. RIP + return-address for context-function
+       on context-function entry: (RSP -0x8) % 16 == 0 */
+    subq    0x128,      %rax
+
+    /* third arg of make_fcontext() == address of context-function */
+    movq    %r8,        0x118(%rax)
+
+    /* first arg of make_fcontext() == top of context-stack
+       save top address of context stack as 'base' */
+    movq    %rcx,       0xd0(%rax)
+    /* second arg of make_fcontext() == size of context-stack
+       negate stack size for LEA instruction (== substraction) */
+    negq    %rdx
+    /* compute bottom address of context stack (limit) */
+    leaq    (%rcx,%rdx),%rcx
+    /* save bottom address of context stack as 'limit' */
+    movq    %rcx,       0xc8(%rax)
+    /* save address of context stack limit as 'dealloction stack' */
+    movq    %rcx,       0xc0(%rax)
+
+    /* save MMX control- and status-word */
+    stmxcsr 0xa8(%rax)
+    /* save x87 control-word */
+    fnstcw  0xac(%rax)
+
+    /* compute abs address of label finish */
+    leaq    $finish,    %rcx
+
+    /* save address of finish as return-address for context-function
+       will be entered after context-function returns */
+    movq    %rcx,       0x120(%rax)
+
+    /* set indicator */
+    movq    $1,         %rcx
+    movq    %rcx,       (%rax)
+
+    ret     /* return pointer to context-data */
+
+finish:
+    /* 32byte shadow-space for _exit() are
+       already reserved by make_fcontext()
+       exit code is zero */
+    xorq    %rcx,       %rcx
+    /* exit application */
+    call    _exit
+    hlt
+ .seh_endproc
+
+.def   _exit;  .scl    2;  .type   32; .endef  /* standard C library function */
\ No newline at end of file