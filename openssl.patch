diff --git openssl-1.0.1h/doc/crypto/rand.pod b/openssl-1.0.1h/doc/crypto/rand.pod
index 1c068c8..c23903f 100644
--- openssl-1.0.1h/doc/crypto/rand.pod
+++ b/openssl-1.0.1h/doc/crypto/rand.pod
@@ -74,16 +74,16 @@ First up I will state the things I believe I need for a good RNG.
 
 =over 4
 
-=item 1
+=item Z<>1
 
 A good hashing algorithm to mix things up and to convert the RNG 'state'
 to random numbers.
 
-=item 2
+=item Z<>2
 
 An initial source of random 'state'.
 
-=item 3
+=item Z<>3
 
 The state should be very large.  If the RNG is being used to generate
 4096 bit RSA keys, 2 2048 bit random strings are required (at a minimum).
@@ -93,13 +93,13 @@ carried away on this last point but it does indicate that it may not be
 a bad idea to keep quite a lot of RNG state.  It should be easier to
 break a cipher than guess the RNG seed data.
 
-=item 4
+=item Z<>4
 
 Any RNG seed data should influence all subsequent random numbers
 generated.  This implies that any random seed data entered will have
 an influence on all subsequent random numbers generated.
 
-=item 5
+=item Z<>5
 
 When using data to seed the RNG state, the data used should not be
 extractable from the RNG state.  I believe this should be a
@@ -108,12 +108,12 @@ data would be a private key or a password.  This data must
 not be disclosed by either subsequent random numbers or a
 'core' dump left by a program crash.
 
-=item 6
+=item Z<>6
 
 Given the same initial 'state', 2 systems should deviate in their RNG state
 (and hence the random numbers generated) over time if at all possible.
 
-=item 7
+=item Z<>7
 
 Given the random number output stream, it should not be possible to determine
 the RNG state or the next random number.
diff --git openssl-1.0.1h/doc/ssl/SSL_CTX_use_psk_identity_hint.pod b/openssl-1.0.1h/doc/ssl/SSL_CTX_use_psk_identity_hint.pod
index 9da7201..31350d8 100644
--- openssl-1.0.1h/doc/ssl/SSL_CTX_use_psk_identity_hint.pod
+++ b/openssl-1.0.1h/doc/ssl/SSL_CTX_use_psk_identity_hint.pod
@@ -83,7 +83,7 @@ Return values from the server callback are interpreted as follows:
 
 =over 4
 
-=item > 0
+=item E<gt>0
 
 PSK identity was found and the server callback has provided the PSK
 successfully in parameter B<psk>. Return value is the length of
diff --git openssl-1.0.1h/doc/ssl/SSL_shutdown.pod b/openssl-1.0.1h/doc/ssl/SSL_shutdown.pod
index 85d4a64..7d9c446 100644
--- openssl-1.0.1h/doc/ssl/SSL_shutdown.pod
+++ b/openssl-1.0.1h/doc/ssl/SSL_shutdown.pod
@@ -104,7 +104,7 @@ erroneous SSL_ERROR_SYSCALL may be flagged even though no error occurred.
 The shutdown was successfully completed. The "close notify" alert was sent
 and the peer's "close notify" alert was received.
 
-=item -1
+=item E<lt>1
 
 The shutdown was not successful because a fatal error occurred either
 at the protocol level or a connection failure occurred. It can also occur if
