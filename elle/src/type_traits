#pragma once

#include_next <type_traits>

namespace std
{
  template <typename C, typename T = void>
  struct enable_if_exists
  {
    using type = T;
  };

  template <typename C, typename T = void>
  using enable_if_exists_t = typename enable_if_exists<C, T>::type;

  template <typename T>
  struct remove_cv_reference
  {
    using type = std::remove_cv_t<std::remove_reference_t<T>>;
  };

  template <typename T>
  using remove_cv_reference_t = typename remove_cv_reference<T>::type;
}

// Local Variables:
// mode: c++
// End:
