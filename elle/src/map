// -*- c++ -*-
#pragma once

#include <ostream>
#include_next <map>
#include <vector>

#include <elle/printf-fwd.hh>

namespace std
{
  template <typename... Args>
  std::ostream&
  operator <<(ostream& out,
              map<Args...> const& map)
  {
    out << "{";
    bool first = true;
    for (auto const& elt: map)
    {
      if (first)
        first = false;
      else
        out << ", ";
      elle::fprintf(out, "%s: %s", elt.first, elt.second);
    }
    out << "}";
    return out;
  }

  template <typename... Args, typename E>
  bool
  contains(std::map<Args...> const& map, E const& e)
  {
    return map.find(e) != map.end();
  }
}

namespace elle
{
  template <typename K, typename... Args>
  auto
  keys(std::map<K, Args...> const& m)
    -> std::vector<K>
  {
    auto res = std::vector<K>{};
    for (const auto& p: m)
      res.emplace_back(p.first);
    return res;
  }
}
