// -*- c++ -*-
#pragma once

#include <ostream>
#include_next <vector>
#include <elle/printf-fwd.hh>

namespace std
{
  template <typename... Args>
  ostream&
  operator <<(ostream& out, vector<Args...> const& v)
  {
    elle::fprintf(out, "[");
    bool first = true;
    for (auto const& elt: v)
    {
      if (first)
      {
        first = false;
        elle::fprintf(out, "%s", elt);
      }
      else
        elle::fprintf(out, ", %s", elt);
    }
    elle::fprintf(out, "]");
    return out;
  }

  /// Look for \a e in \a v, const version.
  template <typename... Args, typename T>
  auto
  find(std::vector<Args...> const& v, T const& e)
    -> typename std::vector<Args...>::const_iterator
  {
    return std::find(std::begin(v), std::end(v), e);
  }

  /// Look for \a e in \a v, mutable version.
  template <typename... Args, typename T>
  auto
  find(std::vector<Args...>& v, T const& e)
    -> typename std::vector<Args...>::iterator
  {
    return std::find(std::begin(v), std::end(v), e);
  }

  /// Whether \a e is in \a v.
  template <typename... Args, typename T>
  bool
  contains(std::vector<Args...> const& v, T const& e)
  {
    return std::find(v, e) != std::end(v);
  }

  /// Emplace back only if not already in the vector.
  ///
  /// The need for this function is somewhat a smell: wouldn't a set
  /// or a flat_set do better?
  template <typename... Args, typename T>
  void
  push_back_if_missing(std::vector<Args...>& v, T const& e)
  {
    if (!contains(v, e))
      v.push_back(e);
  }
}
