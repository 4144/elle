#ifndef ELLE_CHRONO
# define ELLE_CHRONO

# include_next <chrono>

# include <ostream>
# include <cmath>

// Avoid circular header dependencies. Maybe factor this in printf-pwd.hh or
// something.
namespace elle
{
  template <typename F, typename... T>
  void
  fprintf(std::ostream& out,
          F&& fmt,
          T&&... values);
}

namespace std
{
  template <typename T, std::intmax_t Num, std::intmax_t Denom>
  std::ostream&
  operator << (std::ostream& o,
               std::chrono::duration<T, std::ratio<Num, Denom>> const& t)
  {
    auto log = std::ceil(std::log10(t.count()));
    auto significant = int(std::pow(10, std::max(log - 3, 0.)));
    auto pretty = double(t.count() / significant) * significant;
    if (Denom / Num / significant >= 1000000000)
      elle::fprintf(o, "%sns", pretty * Num * 1000000000 / Denom);
    else if (Denom / Num / significant >= 1000000)
      elle::fprintf(o, "%sus", pretty * Num * 1000000 / Denom);
    else if (Denom / Num / significant >= 1000)
      elle::fprintf(o, "%sms", pretty * Num * 1000 / Denom);
    else
      elle::fprintf(o, "%ss", pretty * Num / Denom);
    return o;
  }
}

#endif
