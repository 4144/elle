import drake
import drake.cxx
import drake.cxx.boost

config = None
lib_static = None
lib_dynamic = None

rule_build = None
rule_check = None
rule_install = None
rule_tests = None

asio_udt = None

def configure(cxx_toolkit = None,
              cxx_config = None,
              boost = None,
              elle = None,
              prefix = '/usr'):

  global asio_udt
  global config, lib_static, lib_dynamic
  global rule_build, rule_install

  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  cxx_config = cxx_config or drake.cxx.Config()

  boost = boost or drake.cxx.boost.Boost()
  cxx_config += boost.config()

  config = drake.cxx.Config()
  config.add_local_include_path('src')
  config.standard = drake.cxx.Config.cxx_11
  config.lib_path('lib')
  cxx_config += config

  elle = elle or drake.include('../elle')
  cxx_config += elle.config
  elle_lib = drake.copy(elle.lib_dynamic, 'lib', elle.lib_dynamic.name().dirname())

  # UDT
  asio_udt = drake.include('asio-udt', cxx_toolkit, cxx_config, boost = boost)
  asio_udt_lib = drake.copy(asio_udt.library, '', 'asio-udt')
  udt_lib = drake.copy(asio_udt.udt.library, '', 'asio-udt/udt')
  cxx_config = drake.cxx.Config(cxx_config)
  cxx_config += asio_udt.config
  cxx_config.enable_debug_symbols()

  sources = drake.nodes(
    'src/reactor/Scope.cc',
    'src/reactor/Scope.hh',
    'src/reactor/asio.hh',
    'src/reactor/backend/coro_io/libcoroutine/asm.S',
    'src/reactor/backend/coro_io/libcoroutine/context.cc',
    'src/reactor/backend/coro_io/libcoroutine/coroutine.cc',
    'src/reactor/backend/coro_io/libcoroutine/coroutine.hh',
    'src/reactor/backend/coro_io/thread.cc',
    'src/reactor/backend/coro_io/thread.hh',
    'src/reactor/backend/pthread/pthread.cc',
    'src/reactor/backend/pthread/pthread.hh',
    'src/reactor/backend/thread.hh',
    'src/reactor/duration.cc',
    'src/reactor/duration.hh',
    'src/reactor/exception.cc',
    'src/reactor/exception.hh',
    'src/reactor/fwd.hh',
    'src/reactor/lockable.cc',
    'src/reactor/lockable.hh',
    'src/reactor/logger.cc',
    'src/reactor/mutex.cc',
    'src/reactor/mutex.hh',
    'src/reactor/network/Protocol.hh',
    'src/reactor/network/Protocol.cc',
    'src/reactor/network/buffer.hh',
    'src/reactor/network/exception.cc',
    'src/reactor/network/exception.hh',
    'src/reactor/network/fwd.hh',
    'src/reactor/network/resolve.cc',
    'src/reactor/network/resolve.hh',
    'src/reactor/network/server.cc',
    'src/reactor/network/server.hh',
    'src/reactor/network/socket-operation.hh',
    'src/reactor/network/socket.cc',
    'src/reactor/network/socket.hh',
    'src/reactor/network/tcp-server.cc',
    'src/reactor/network/tcp-server.hh',
    'src/reactor/network/tcp-socket.cc',
    'src/reactor/network/tcp-socket.hh',
    'src/reactor/network/udp-socket.cc',
    'src/reactor/network/udp-socket.hh',
    'src/reactor/network/udt-server.cc',
    'src/reactor/network/udt-server.hh',
    'src/reactor/network/udt-socket.cc',
    'src/reactor/network/udt-socket.hh',
    'src/reactor/network/nat.cc',
    'src/reactor/network/nat.hh',
    'src/reactor/operation.cc',
    'src/reactor/operation.hh',
    'src/reactor/rw-mutex.cc',
    'src/reactor/rw-mutex.hh',
    'src/reactor/scheduler.cc',
    'src/reactor/scheduler.hh',
    'src/reactor/semaphore.cc',
    'src/reactor/semaphore.hh',
    'src/reactor/signal.cc',
    'src/reactor/signal.hh',
    'src/reactor/sleep.cc',
    'src/reactor/sleep.hh',
    'src/reactor/storage.cc',
    'src/reactor/storage.hh',
    'src/reactor/thread.cc',
    'src/reactor/thread.hh',
    'src/reactor/waitable.cc',
    'src/reactor/waitable.hh',
    )

  cxx_config.lib_path_runtime('.')
  # FIXME: should not depend on UDT
  lib_static = drake.cxx.StaticLib('lib/reactor', sources + [asio_udt_lib, udt_lib], cxx_toolkit, cxx_config)
  lib_dynamic = drake.cxx.DynLib('lib/reactor', sources + [asio_udt_lib, udt_lib], cxx_toolkit, cxx_config)

  # Build
  rule_build = drake.Rule('build')
  rule_build << lib_static
  rule_build << lib_dynamic

  # Tests
  global rule_check, rule_tests
  rule_check = drake.Rule('check')
  rule_tests = drake.Rule('tests')

  tests = [
    'reactor/backend',
    'reactor/logger',
    'reactor/network',
    'reactor/reactor',
    'reactor/udt-socket',
    'reactor/nat',
    ]

  cxx_config_tests = cxx_config + config
  cxx_config_tests += boost.config()
  cxx_config_tests += boost.config_filesystem(static = (cxx_toolkit.os is drake.os.macos))
  cxx_config_tests += boost.config_signals()
  cxx_config_tests += boost.config_system()
  cxx_config_tests += boost.config_test()

  for test in tests:
    config = drake.cxx.Config(cxx_config_tests)
    config.lib_path_runtime('%s../lib' % ('../' * test.count('/')))
    test = drake.cxx.Executable('tests/%s' % test,
                                drake.nodes('tests/%s.cc' % test) + [lib_dynamic, elle_lib],
                                cxx_toolkit, config)
    rule_tests << test
    runner = drake.Runner(test)
    rule_check << runner.status

  # Install
  rule_install = drake.Rule('install')
  rule_install << drake.copy(lib_dynamic, prefix)
  rule_install << drake.copy(lib_static, prefix)
  rule_install << drake.copy(list(filter(lambda n: isinstance(n, drake.cxx.Header), sources)), prefix / 'include', 'src')
