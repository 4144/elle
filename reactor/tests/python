#!/usr/bin/env python3

import reactor
import unittest

class Beacon:

  def __init__(self):
    self.__value = 0

  def increment(self):
    self.__value += 1

  def check(self, value):
    assert self.__value == value

  @property
  def value(self):
    return self.__value

class TestReactor(unittest.TestCase):

  def test_basic(self):
    beacon = Beacon()
    sched = reactor.Scheduler()
    thread = reactor.Thread(sched, 'thread',
                            lambda: beacon.increment())
    sched.run()
    beacon.check(1)

  # def test_yields(self):
  #   beacon = Beacon()
  #   def thread(expect, n):
  #     beacon.check(expect + 0)
  #     beacon.increment()
  #     beacon.check(expect + 1)
  #     reactor.yield_()
  #     beacon.check(expect + n)
  #     beacon.increment()
  #   sched = reactor.Scheduler()
  #   thread1 = reactor.Thread(sched, 'thread 1', lambda: thread(0, 3))
  #   thread2 = reactor.Thread(sched, 'thread 2', lambda: thread(1, 3))
  #   thread3 = reactor.Thread(sched, 'thread 3', lambda: thread(2, 3))
  #   sched.run()
  #   beacon.check(6)

unittest.main()
