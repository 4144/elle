h1. Protocol Documentation

h2. UDP

Every node should have a listening UDP socket. UPD is the way to send data.
TCP maybe used for large transferts between two nodes.

h2. Headers

Every packets should start with the packet header.
The structure is described in hole::PacketHeader.
A packet header contains:
* A 16 bits command id field (uint16).
* A 16 bits command tag field (uint16). This field is used to track replies.
* A 16 bits command length field (uint16). This is the number of bytes following
the length field.
* The variable length data field.

Here is a small representation of a command packet:
<pre>
| cmd id | cmd tag | length |    data ....       |
|0     15|16     31|32    47|48   48 + length * 8|
</pre>

h2. Common data structure

h3. Header

This data structure prefix every datagram packets.
<pre>
| uint16 cmd id | uint16 cmd tag | uint16 length |
</pre>

h3. Key

This is a key (from SHA1). 160 bits at the moment.

h3. Host

This structure represent an host which is an address and a port.
<pre>
| QHostAddress address | uint16 port |
</pre>

h3. Node

This structure represent a node:
<pre>
| Key | Host |
</pre>

h2. Command list

|_.name|_.id|
|ping|0|
|pong|1|
|quit|2|
|find_successor|3|
|successor_found|4|


h2. Commands description

h3. ping & pong

ping & pong are used to check if a peer is still alive and mesure the latence.
First you send ping to query a node, then you should receive pong from this host.

h3. quit

quit is sent to tell peers that we are disconnecting from the network.

h3. find_successor

This command is used to look for the successor of node N.

<pre>
| Header | Host origin | Key (N's key) |
</pre>

h3. successor_found

This is a reply for *find_successor*. Send it to original host, with the
successor node.
<pre>
| Header | Node successor |
</pre>
