import os

import drake
import drake.cxx
import drake.cxx.boost
import drake.valgrind

config = None
lib_static = None
lib_dynamic = None

openssl_config = None
openssl_libs = None
openssl_prefix = None

rule_build = None
rule_check = None
rule_install = None
rule_tests = None

def configure(cxx_toolkit = None,
              cxx_config = None,
              openssl = None,
              enable_rotation = False,
              dopenssl = None,
              boost = None,
              elle = None,
              prefix = '/usr',
              valgrind = None):

  global config
  global lib_static, lib_dynamic
  global openssl_config, openssl_libs, openssl_prefix
  global rule_build, rule_install

  with open(str(drake.path_src('../drake-utils.py')), 'r') as f:
    exec(f.read(), globals(), globals())

  # Toolkit
  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()

  # OpenSSL
  openssl_basename = 'openssl-1.0.1c'
  openssl_tarball = drake.node('openssl/%s.tar.gz' % openssl_basename)
  openssl_root = drake.Path('openssl') / openssl_basename
  openssl_url = 'http://openssl.org/source/%s.tar.gz'% openssl_basename
  drake.HTTPDownload(openssl_url, openssl_tarball,
                     fingerprint = 'ae412727c8c15b67880aef7bd2999b2e')
  drake.TarballExtractor(
    openssl_tarball,
    targets =
    ['%s/%s' % (openssl_basename, f) for f in [
        'Configure',
        'include/openssl/aes.h',
        'include/openssl/asn1.h',
        'include/openssl/asn1_mac.h',
        'include/openssl/asn1t.h',
        'include/openssl/bio.h',
        'include/openssl/blowfish.h',
        'include/openssl/bn.h',
        'include/openssl/buffer.h',
        'include/openssl/camellia.h',
        'include/openssl/cast.h',
        'include/openssl/cmac.h',
        'include/openssl/cms.h',
        'include/openssl/comp.h',
        'include/openssl/conf_api.h',
        'include/openssl/conf.h',
        'include/openssl/crypto.h',
        'include/openssl/des.h',
        'include/openssl/des_old.h',
        'include/openssl/dh.h',
        'include/openssl/dsa.h',
        'include/openssl/dso.h',
        'include/openssl/dtls1.h',
        'include/openssl/ebcdic.h',
        'include/openssl/ecdh.h',
        'include/openssl/ecdsa.h',
        'include/openssl/ec.h',
        'include/openssl/engine.h',
        'include/openssl/e_os2.h',
        'include/openssl/err.h',
        'include/openssl/evp.h',
        'include/openssl/hmac.h',
        'include/openssl/idea.h',
        'include/openssl/krb5_asn.h',
        'include/openssl/kssl.h',
        'include/openssl/lhash.h',
        'include/openssl/md4.h',
        'include/openssl/md5.h',
        'include/openssl/mdc2.h',
        'include/openssl/modes.h',
        'include/openssl/objects.h',
        'include/openssl/obj_mac.h',
        'include/openssl/ocsp.h',
        'include/openssl/opensslconf.h',
        'include/openssl/opensslv.h',
        'include/openssl/ossl_typ.h',
        'include/openssl/pem2.h',
        'include/openssl/pem.h',
        'include/openssl/pkcs12.h',
        'include/openssl/pkcs7.h',
        'include/openssl/pqueue.h',
        'include/openssl/rand.h',
        'include/openssl/rc2.h',
        'include/openssl/rc4.h',
        'include/openssl/ripemd.h',
        'include/openssl/rsa.h',
        'include/openssl/safestack.h',
        'include/openssl/seed.h',
        'include/openssl/sha.h',
        'include/openssl/srp.h',
        'include/openssl/srtp.h',
        'include/openssl/ssl23.h',
        'include/openssl/ssl2.h',
        'include/openssl/ssl3.h',
        'include/openssl/ssl.h',
        'include/openssl/stack.h',
        'include/openssl/symhacks.h',
        'include/openssl/tls1.h',
        'include/openssl/ts.h',
        'include/openssl/txt_db.h',
        'include/openssl/ui_compat.h',
        'include/openssl/ui.h',
        'include/openssl/whrlpool.h',
        'include/openssl/x509.h',
        'include/openssl/x509v3.h',
        'include/openssl/x509_vfy.h',
        ]])
  openssl_configure = drake.node(openssl_root / 'Configure')
  from drake.cxx import DynLib
  if cxx_toolkit.os is drake.os.linux:
    openssl_lib_ssl = DynLib('openssl/lib/libssl.so.1.0.0',
                             lib_name = 'ssl')
    openssl_lib_crypto = DynLib('openssl/lib/libcrypto.so.1.0.0',
                                lib_name = 'crypto')
  else:
    openssl_lib_ssl = DynLib('openssl/lib/libssl.1.0.0.dylib',
                             lib_name = 'ssl')
    openssl_lib_crypto = DynLib('openssl/lib/libcrypto.1.0.0.dylib',
                                lib_name = 'crypto')
  openssl_libs = [openssl_lib_ssl, openssl_lib_crypto]
  openssl_prefix = drake.path_build('openssl')
  if cxx_toolkit.os is drake.os.linux:
    os_string = 'x86_64-whatever-linux2'
  else:
    os_string = 'darwin64-x86_64-cc'
  GNUBuilder(cxx_toolkit,
             configure = openssl_configure,
             configure_interpreter = 'perl',
             targets = openssl_libs,
             args = [
               '--prefix=%s/%s' % (os.getcwd(), openssl_prefix),
               'shared',
               'no-asm',
               '-DPURIFY',
               os_string,
             ])
  openssl_libs = drake.copy(openssl_libs, '.', 'openssl')
  openssl_config = drake.cxx.Config()
  openssl_config.add_local_include_path(openssl_root / 'include')
  # Not needed since we use the nodes directly
  # openssl_config.lib_path('openssl/lib')

  if enable_rotation:
    cxx_config.define("ELLE_CRYPTOGRAPHY_ROTATION")
    dopenssl = drake.cxx.find_library('dopenssl/all.h', dopenssl)
  boost = boost or drake.cxx.boost.Boost()
  elle = elle or drake.include('../elle')
  # XXX elle = drake.cxx.find_library('elle/elle.hh', elle)

  # dOpenSSL
  # XXX
  #dopenssl = drake.include('dopenssl', cxx_toolkit, cxx_config, openssl = openssl.config())
  #dopenssl_lib = drake.copy(dopenssl.lib_dynamic, 'lib', dopenssl.lib_dynamic.path().dirname())

  # Global Configuration
  config = drake.cxx.Config()
  config.standard = drake.cxx.Config.cxx_11
  config.add_local_include_path('sources')
  config.lib_path('lib')
  config += openssl_config
  if enable_rotation:
    config += dopenssl

  # Local Configuration
  cxx_config = drake.cxx.Config(cxx_config)
  cxx_config += config
  cxx_config += boost.config()
  cxx_config += boost.config_system()
  cxx_config += elle.config

  # Sources
  sources = drake.nodes(
    'sources/cryptography/Clear.hh',
    'sources/cryptography/Code.hh',
    'sources/cryptography/Cryptosystem.cc',
    'sources/cryptography/Cryptosystem.hh',
    'sources/cryptography/deleter.cc',
    'sources/cryptography/deleter.hh',
    'sources/cryptography/Digest.hh',
    'sources/cryptography/Exception.hh',
    'sources/cryptography/Exception.cc',
    'sources/cryptography/Input.cc',
    'sources/cryptography/Input.hh',
    'sources/cryptography/KeyPair.cc',
    'sources/cryptography/KeyPair.hh',
    'sources/cryptography/KeyPair.hxx',
    'sources/cryptography/Output.cc',
    'sources/cryptography/Output.hh',
    'sources/cryptography/Output.hxx',
    'sources/cryptography/Plain.hh',
    'sources/cryptography/PrivateKey.cc',
    'sources/cryptography/PrivateKey.hh',
    'sources/cryptography/PrivateKey.hxx',
    'sources/cryptography/PublicKey.cc',
    'sources/cryptography/PublicKey.hh',
    'sources/cryptography/PublicKey.hxx',
    'sources/cryptography/SecretKey.cc',
    'sources/cryptography/SecretKey.hh',
    'sources/cryptography/SecretKey.hxx',
    'sources/cryptography/Signature.hh',
    'sources/cryptography/all.hh',
    'sources/cryptography/bn.cc',
    'sources/cryptography/bn.hh',
    'sources/cryptography/bn.hxx',
    'sources/cryptography/challenge.cc',
    'sources/cryptography/challenge.hh',
    'sources/cryptography/cipher.cc',
    'sources/cryptography/cipher.hh',
    'sources/cryptography/cryptography.cc',
    'sources/cryptography/cryptography.hh',
    'sources/cryptography/evp.cc',
    'sources/cryptography/evp.hh',
    'sources/cryptography/finally.hh',
    'sources/cryptography/fwd.hh',
    'sources/cryptography/oneway.cc',
    'sources/cryptography/oneway.hh',
    'sources/cryptography/oneway.hxx',
    'sources/cryptography/pem.cc',
    'sources/cryptography/pem.hh',
    'sources/cryptography/pem.hxx',
    'sources/cryptography/random.cc',
    'sources/cryptography/random.hh',
    'sources/cryptography/random.hxx',
    'sources/cryptography/rsa/PrivateKey.cc',
    'sources/cryptography/rsa/PrivateKey.hh',
    'sources/cryptography/rsa/PrivateKey.hxx',
    'sources/cryptography/rsa/PublicKey.cc',
    'sources/cryptography/rsa/PublicKey.hh',
    'sources/cryptography/rsa/PublicKey.hxx',
    'sources/cryptography/rsa/all.hh',
    'sources/cryptography/rsa/fwd.hh',
    'sources/cryptography/rsa/keypair.cc',
    'sources/cryptography/rsa/keypair.hh',
    'sources/cryptography/rsa/padding.cc',
    'sources/cryptography/rsa/padding.hh',
    'sources/cryptography/types.hh',
    )

  if enable_rotation:
    sources += drake.nodes(
      'sources/cryptography/Seed.cc',
      'sources/cryptography/Seed.hh',
      'sources/cryptography/Seed.hxx',
      'sources/cryptography/rsa/Seed.cc',
      'sources/cryptography/rsa/Seed.hh',
      'sources/cryptography/rsa/Seed.hxx',
      )

  cxx_config_lib = drake.cxx.Config(cxx_config)
  if enable_rotation:
    cxx_config.lib('dopenssl')
  cxx_config_lib.lib_path_runtime('.')

  lib_static = drake.cxx.StaticLib('lib/cryptography',
                                   sources + openssl_libs,
                                   cxx_toolkit,
                                   cxx_config_lib)
  lib_dynamic = drake.cxx.DynLib('lib/cryptography',
                                 sources + openssl_libs,
                                 cxx_toolkit,
                                 cxx_config_lib)

  # Build
  rule_build = drake.Rule('build')
  rule_build << lib_static
  rule_build << lib_dynamic

  # Tests
  tests = [
    "Input.cc",
    "KeyPair.cc",
    "Output.cc",
    "PrivateKey.cc",
    "PublicKey.cc",
    "SecretKey.cc",
    "bn.cc",
    "challenge.cc",
    "oneway.cc",
    "random.cc",
     ]
  if enable_rotation:
    tests += [ "Seed.cc" ]

  tests_cxx_config = drake.cxx.Config(cxx_config)
  tests_cxx_config += config
  tests_cxx_config += boost.config()
  tests_cxx_config += boost.config_test()
  tests_cxx_config += openssl_config
  if enable_rotation:
    tests_cxx_config += dopenssl
  tests_cxx_config += elle.config

  global rule_check, rule_tests
  rule_check = drake.TestSuite('check')
  rule_tests = drake.Rule('tests')
  for test in tests:
    config_test = drake.cxx.Config(tests_cxx_config)
    config_test.lib_path_runtime('%s../../lib' % ('../' * test.count('/')))
    # FIXME: this is the path to libelle, but it's kinda hardcoded
    config_test.lib_path_runtime('%s../../../elle/lib' % ('../' * test.count('/')))
    path = drake.Path('tests/cryptography/%s' % test)
    bin_path = drake.Path('tests/cryptography/%s' % os.path.splitext(test)[0])
    sources = drake.nodes(path)
    sources.append(lib_dynamic)
    sources.append(elle.lib_dynamic)
    sources.append(openssl_lib_crypto) # Some tests use BIGNUM
    bin = drake.cxx.Executable(bin_path, sources,
                               cxx_toolkit, config_test)
    rule_tests << bin
    if valgrind is not None:
      runner = drake.valgrind.ValgrindRunner(exe = bin,
                                             valgrind = valgrind)
    else:
      runner = drake.Runner(exe = bin)
    runner.reporting = drake.Runner.Reporting.on_failure
    rule_check << runner.status

  # Install
  rule_install = drake.Rule('install')
  prefix = drake.Path(prefix)
  rule_install << drake.install(lib_dynamic, prefix)
  rule_install << drake.install(lib_static, prefix)
  rule_install << drake.install(
    list(filter(lambda n: isinstance(n, drake.cxx.Header), sources)),
    prefix / 'include', 'sources')
