import drake
import drake.cxx
import drake.cxx.boost
import os
import sys

config = None
elle = None
cryptography = None
protocol = None
reactor = None
curly = None
asio_udt = None
rule_check = None
rule_tests = None

def configure(cxx_toolkit = None,
              cxx_config = None,
              boost = None,
              enable_rotation = False,
              dopenssl = None,
              prefix = '/usr',
              valgrind = None):

  global config
  global elle
  global cryptography
  global protocol
  global reactor
  global asio_udt
  global curly

  cxx_toolkit = cxx_toolkit or drake.cxx.Toolkit()
  boost = boost or drake.cxx.boost.Boost(cxx_toolkit = cxx_toolkit)

  prefix = drake.Path(prefix)
  if not prefix.absolute():
    prefix = drake.Path('..') / prefix

  cxx_config = drake.cxx.Config(cxx_config)
  if cxx_toolkit.os == drake.os.linux:
    cxx_config.define('INFINIT_LINUX')
  elif cxx_toolkit.os == drake.os.macos:
    cxx_config.define('INFINIT_MACOSX')
  elif cxx_toolkit.os == drake.os.windows:
    cxx_config.define('INFINIT_WINDOWS')
    cxx_config.lib('Shlwapi')
    cxx_config.lib('ws2_32')
    cxx_config.lib('Gdi32')
    cxx_config.lib('mswsock')
  cxx_config.export_dynamic = True
  cxx_config.warnings.parentheses = False
  cxx_config.warnings.empty_body = False
  # Clang/GCC disagree on std::hash struct versus class.
  cxx_config.warnings.mismatched_tags = False
  cxx_config.warnings.missing_declarations = \
    drake.cxx.Config.Warnings.Error
  cxx_config.warnings.return_type = \
    drake.cxx.Config.Warnings.Error

  elle = drake.include('elle',
                       cxx_toolkit = cxx_toolkit,
                       cxx_config = cxx_config,
                       boost = boost,
                       prefix = prefix,
                       valgrind = valgrind)
  cryptography = drake.include('cryptography',
                               cxx_toolkit = cxx_toolkit,
                               cxx_config = cxx_config,
                               enable_rotation = enable_rotation,
                               dopenssl = dopenssl,
                               boost = boost,
                               elle = elle,
                               prefix = prefix,
                               valgrind = valgrind)
  reactor = drake.include('reactor',
                          cxx_toolkit = cxx_toolkit,
                          cxx_config = cxx_config,
                          boost = boost,
                          elle = elle,
                          prefix = prefix,
                          valgrind = valgrind)
  curly = drake.include(
    'curly',
    cxx_toolkit = cxx_toolkit,
    cxx_config = cxx_config,
    boost = boost,
    elle = elle,
    curl = None,
    reactor = reactor,
    prefix = prefix,
    valgrind = valgrind,
    openssl = cryptography.openssl_prefix,
    openssl_libs = cryptography.openssl_libs,
  )
  protocol = drake.include('protocol',
                           cxx_toolkit = cxx_toolkit,
                           cxx_config = cxx_config,
                           boost = boost,
                           cryptography = cryptography,
                           elle = elle,
                           reactor = reactor,
                           prefix = prefix,
                           valgrind = valgrind)

  config = drake.cxx.Config()
  config += cryptography.config
  config += curly.config
  config += elle.config
  config += protocol.config
  config += reactor.config

  asio_udt = reactor.asio_udt_lib

  build = drake.Rule('build')
  build << elle.rule_build
  build << cryptography.rule_build
  build << reactor.rule_build
  build << curly.rule_build

  global rule_tests
  rule_tests = drake.Rule('tests')
  rule_tests << elle.rule_tests
  rule_tests << cryptography.rule_tests
  rule_tests << reactor.rule_tests
  rule_tests << curly.rule_tests
  rule_tests << protocol.rule_tests

  global rule_check
  rule_check = drake.Rule('check')
  rule_check << elle.rule_check
  rule_check << cryptography.rule_check
  rule_check << reactor.rule_check
  rule_check << curly.rule_check
  rule_check << protocol.rule_check

  install = drake.Rule('install')
  install << elle.rule_install
  install << cryptography.rule_install
  install << reactor.rule_install
  install << curly.rule_install
  install << protocol.rule_install
