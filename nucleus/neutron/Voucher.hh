//
// ---------- header ----------------------------------------------------------
//
// project       nucleus
//
// license       infinit
//
// file          /home/mycure/infinit/nucleus/neutron/Voucher.hh
//
// created       julien quintard   [mon feb 16 21:13:00 2009]
// updated       julien quintard   [thu may  5 13:33:36 2011]
//

#ifndef NUCLEUS_NEUTRON_VOUCHER_HH
#define NUCLEUS_NEUTRON_VOUCHER_HH

//
// ---------- includes --------------------------------------------------------
//

#include <elle/Elle.hh>

namespace nucleus
{
  namespace neutron
  {

//
// ---------- class -----------------------------------------------------------
//

    ///
    /// a voucher represents a certificate, generated by a delegate,
    /// proving that a vassal had the right the perform an operation
    /// at the time it has been carried out.
    ///
    class Voucher:
      public elle::Object
    {
    public:
      //
      // methods
      //
      //elle::Status		Create(PublicKey&, ...);
      // XXX un voucher devrait etre lie a un contenu donc probablement
      // version + hash content, un truc du genre bien que le contenu on
      // s'en fout en fait vu que le delegate ne va pas verifier. le truc
      // important c'est d'empecher un vassal de faire de la merde donc
      // il faudra creer le voucher pour la version N + 1 de l'objet.

      //
      // interfaces
      //

      // object
      declare(Voucher);
      elle::Boolean	operator==(const Voucher&) const;

      // dumpable
      elle::Status	Dump(const elle::Natural32 = 0) const;

      // archivable
      elle::Status	Serialize(elle::Archive&) const;
      elle::Status	Extract(elle::Archive&);

      //
      // attributes
      //
      elle::PublicKey	user;
      elle::Signature	signature;
      // XXX signature should include Object address and data version
    };

  }
}

#endif
