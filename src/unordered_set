#pragma once

#include <ostream>
#include_next <unordered_set>
#include <elle/printf-fwd.hh>

namespace std
{
  template <typename... Args>
  ostream&
  operator <<(ostream& out, unordered_set<Args...> const& v)
  {
    elle::fprintf(out, "{");
    bool first = true;
    bool fixed = out.flags() & std::ios::fixed;
    for (auto const& elt: v)
    {
      if (first)
      {
        first = false;
        elle::fprintf(out, fixed ? "%f" : "%s", elt);
      }
      else
        elle::fprintf(out, fixed ? ", %f" : ", %s", elt);
    }
    elle::fprintf(out, "}");
    return out;
  }

  template <typename T, typename... Args>
  bool
  contains(std::unordered_set<Args...> const& set, T const& e)
  {
    return set.find(e) != set.end();
  }
}

// Local Variables:
// mode: c++
// End:
