#!/usr/bin/env python3

import sys
import os
import subprocess
import shutil

def cmd(*args, **kwargs):
    return subprocess.check_output(list(args), **kwargs)

def error(*args):
    sys.stderr.write(' '.join(str(a) for a in args))

def fatal(*args):
    error(*args)
    sys.exit(1)

def which(executable):
    path = os.environ["PATH"]
    for d in path.split(":"):
        file = os.path.join(d,executable)
        if os.path.exists(file):
            return file

DIR_SOURCE = os.environ["DIR_SOURCE"]
DIR_BUILD = os.environ["DIR_BUILD"]
DIR_INSTALL = os.environ["DIR_INSTALL"]

for d in [DIR_SOURCE, DIR_BUILD]:
    if not os.path.isdir(d):
        fatal(d, "is not a directory")

name = cmd("cd '%s' && git describe" % DIR_SOURCE, shell=True).decode("utf-8").strip()
rev = cmd("git", "rev-parse", "--short", "HEAD").decode("utf-8").strip()
version = name.split("-")[0]
major = version.split(".")[0]
minor = version.split(".")[1]



DIR_INSTALL_CLIENT = "%s/client" % DIR_INSTALL

shutil.rmtree(DIR_INSTALL_CLIENT, True)
os.makedirs(DIR_INSTALL_CLIENT)

if which("otool"):
    def get_deps(arg):
        deps = cmd('otool', '-L', arg).decode("utf-8")
        deps = deps.split("\n")[:-1]
        if not deps:
            return []
        return (dep.strip().split(" ")[0] for dep in deps[1:])
elif which("ldd"):
    def get_deps(arg):
        deps = cmd('ldd', arg).decode("utf-8")
        deps = deps.split('\n')
        if not deps:
            return
        for dep in deps[1:]:
            dep = dep.strip()
            if not dep or '=>' not in dep:
                return
            yield dep.split('=>')[1].strip().split(' ')[0].strip()
else:
    raise Exception("otool or ldd needed")

def ship_libs(binary, dest_dir):
    for dep in get_deps(binary):
        lib = os.path.basename(dep)
        path = os.path.dirname(dep)
        if to_add(lib) and not os.path.exists(os.path.join(dest_dir, lib)):
            print('Add lib : %s to %s' % (dep, dest_dir))
            shutil.copy(dep, dest_dir)

def to_add(lib):

    patterns_exclude = {
        'startswith': [
            "/lib64/ld-linux-x86-64",
            "/lib/ld-linux-x86-64",
            "libICE",
            "libSM",
            "libX",
            "libaudio",
            "libbz2",
            "libcrypto",
            "libffi",
            "libfontconfig",
            "libfreetype",
            "libfuse",
            "libgcc",
            "libglib",
            "libgobject",
            "libgthread",
            "libpcre",
            "librt",
            "libssl",
            "libtinfo",
            "libuuid",
            "libxcb",
            "linux-vdso",
            "linux-gate",
            "libSystem"
        ],

        'contains': [
            "libstdc.",
            "libstdc++.",
            "libpthread.",
            "libc.",
            "libm.",
            "libdl.",
        ]
    }
    patterns_include = {
        'startswith': [
            "libboost",
            "libQt",
            "libexpat",
            "libncurses",
            "libpng",
            "libqjson",
            "libreadline",
        ],
        'contains': [
            "libpth.",
            "libz.",
        ]
    }


    if any(lib.startswith(p) for p in patterns_exclude['startswith']) or \
       any(p in lib for p in patterns_exclude['contains']):
        return False
    elif any(lib.startswith(p) for p in patterns_include['startswith']) or \
         any(p in lib for p in patterns_include['contains']):
        return True
    else:
        raise Exception("lib not specified: %s" % lib)

DIR_INSTALL_CLIENT_BIN = os.path.join(DIR_INSTALL_CLIENT, "bin")
DIR_INSTALL_CLIENT_LIB = os.path.join(DIR_INSTALL_CLIENT, "lib")
DIR_INSTALL_CLIENT_TEMP = os.path.join(DIR_INSTALL_CLIENT, "temp")
os.makedirs(DIR_INSTALL_CLIENT_BIN)
os.makedirs(DIR_INSTALL_CLIENT_LIB)
os.makedirs(DIR_INSTALL_CLIENT_TEMP)

infinit_path = [
    "8infinit",
    "plasma/updater/8updater",
    "plasma/watchdog/8watchdog",
]

for f in infinit_path:
    dst = os.path.join(DIR_INSTALL_CLIENT_BIN, os.path.basename(f))
    shutil.copy(os.path.join(DIR_BUILD, f), dst)
    cmd('strip', dst)
    print("Ship libs for %s" % dst)
    ship_libs(dst, DIR_INSTALL_CLIENT_LIB)
    if which("patchelf"):
        print("patchelf for:", dst)
        os.system("ldd %s" % dst)
        cmd('patchelf', '--debug', '--set-rpath', '$ORIGIN/../lib', dst)
    elif which("install_name_tool"):
        pass
        #cmd("install_name_tool", "-change", f, dst)
    else:
        raise Exception("patchelf or install_name_tool needed")

infinit_app = os.path.join(DIR_BUILD, "surface/macosx/Infinit.app")
if os.path.exists(infinit_app):
    shutil.copytree("/Library/Frameworks/QtGui.framework/Versions/4/Resources/qt_menu.nib", os.path.join(DIR_INSTALL_CLIENT_LIB, "qt_menu.nib"))
    dst = os.path.join(DIR_INSTALL_CLIENT_TEMP, os.path.basename(infinit_app))
    print("infinit.app %s" % dst)
    shutil.copytree(infinit_app, dst)
    for f in infinit_path:
        binary_path = os.path.join(DIR_INSTALL_CLIENT_BIN, os.path.basename(f))
        if which("install_name_tool"):
            for dep in get_deps(binary_path):
                lib = os.path.basename(dep)
                if to_add(lib):
                    cmd("install_name_tool", "-change", dep, os.path.join("@loader_path/../lib", os.path.basename(dep))  , binary_path)
                    print("add : %s" % dep)
    os.makedirs(os.path.join(dst, "Contents/Resources/bin"))
    shutil.copy(os.path.join(DIR_INSTALL_CLIENT_BIN, os.path.basename("8updater")), os.path.join(dst, "Contents/Resources/bin"))
    shutil.copytree(DIR_INSTALL_CLIENT_LIB, os.path.join(dst, "Contents/Resources/lib"))
    #shutil.rmtree(dst)


print("Prepare the manifest")
cmd(os.path.join(DIR_SOURCE,'farm/make_manifest'), DIR_INSTALL_CLIENT, major, minor, rev)

DIR_INSTALL_SERVER = os.path.join(DIR_INSTALL, "server")
shutil.rmtree(DIR_INSTALL_SERVER, True)
os.makedirs(DIR_INSTALL_SERVER)

# list ()
# {
#     cd "$DIR_BUILD/oracle/disciples/"
#     find "$@"
# }

server_scripts = [
    "metalib/__init__.py",
    "metalib/metalib.so",
    "pythia",
    "meta",
    "creosus",
    "troll",
    "static",
    "meta-server",
    "meta-tests",
    "creosus-server",
    "production-meta-server.sh",
    "production-creosus-server.sh"
]

if os.path.isdir(os.path.join(DIR_BUILD, "oracle")): # oracle is built
    for f in server_scripts:
        src = os.path.join(DIR_BUILD, "oracle/disciples", f)
        dst = os.path.join(DIR_INSTALL_SERVER, f)
        print("cpy", src, "->", dst)
        if os.path.isdir(src):
            shutil.copytree(src, dst)
        else:
            if not os.path.isdir(os.path.dirname(dst)):
                os.makedirs(os.path.dirname(dst))
            shutil.copy(src, dst)

# for f in                                                \
#     metalib/__init__.py                                 \
#     metalib/metalib.so                                  \
#     $(list pythia -name '*.py')                         \
#     $(list meta -name '*.py')                           \
#     $(list creosus -name '*.py' -or -name '*.html')     \
#     $(list troll -name '*.py')                          \
#     meta-server                                         \
#     meta-tests                                          \
#     creosus-server                                      \
#     production-meta-server.sh                           \
#     production-creosus-server.sh
# do
#     mkdir -p "$DIR_INSTALL_SERVER/$(dirname "$f")"
#     cp -r "$DIR_BUILD/oracle/disciples/$f" "$DIR_INSTALL_SERVER/$f"
# done
