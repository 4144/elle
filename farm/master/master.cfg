# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### MISCELLANEOUS

def isGCCScheduler(step):
    print "SUCE MON CUL XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    print step
    print step.getProperties()
    return False

    # XXX
#    print self.getProperty('scheduler')
#    return False

#    if self.getProperty('scheduler') == 'gcc':
#        return True
#    else:
#        return False

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c['slaves'] = [BuildSlave("archlinux-32bit", "veyusPaw56erache")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []

c['change_source'].append(GitPoller(
        '/home/mycure/infinit/.git',
        workdir='repository/git/', branch='master',
        pollinterval=20))
c['change_source'].append(GitPoller(
        '/home/mycure/infinit/agent/.git',
        workdir='repository/agent', branch='master',
        pollinterval=20))
c['change_source'].append(GitPoller(
        '/home/mycure/infinit/applications/.git',
        workdir='repository/applications/', branch='master',
        pollinterval=20))
c['change_source'].append(GitPoller(
        '/home/mycure/infinit/comet/.git',
        workdir='repository/comet', branch='master',
        pollinterval=20))
c['change_source'].append(GitPoller(
        '/home/mycure/infinit/elle/.git',
        workdir='repository/elle', branch='master',
        pollinterval=20))
c['change_source'].append(GitPoller(
        '/home/mycure/infinit/etoile/.git',
        workdir='repository/etoile', branch='master',
        pollinterval=20))
c['change_source'].append(GitPoller(
        '/home/mycure/infinit/horizon/.git',
        workdir='repository/horizon', branch='master',
        pollinterval=20))
c['change_source'].append(GitPoller(
        '/home/mycure/infinit/hole/.git',
        workdir='repository/hole', branch='master',
        pollinterval=20))
c['change_source'].append(GitPoller(
        '/home/mycure/infinit/lune/.git',
        workdir='repository/lune', branch='master',
        pollinterval=20))
c['change_source'].append(GitPoller(
        '/home/mycure/infinit/nucleus/.git',
        workdir='repository/nucleus', branch='master',
        pollinterval=20))
c['change_source'].append(GitPoller(
        '/home/mycure/infinit/oracle/.git',
        workdir='repository/oracle', branch='master',
        pollinterval=20))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter

c['schedulers'] = []

c['schedulers'].append(SingleBranchScheduler(
                            name="gcc",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["gcc"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="mingw",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["mingw"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand, Configure, Compile

factory = BuildFactory()

# check out the source
factory.addStep(Git(repourl='/home/mycure/infinit/.git',
                    mode='clobber'))

# XXX these are done because the cloned repositories do not get
#     copied in the build/ directory!!!
factory.addStep(Git(repourl='/home/mycure/infinit/agent/.git',
                    workdir="build/agent",
                    mode='update'))
factory.addStep(Git(repourl='/home/mycure/infinit/applications/.git',
                    workdir="build/applications",
                    mode='update'))
factory.addStep(Git(repourl='/home/mycure/infinit/comet/.git',
                    workdir="build/comet",
                    mode='update'))
factory.addStep(Git(repourl='/home/mycure/infinit/elle/.git',
                    workdir="build/elle",
                    mode='update'))
factory.addStep(Git(repourl='/home/mycure/infinit/etoile/.git',
                    workdir="build/etoile",
                    mode='update'))
factory.addStep(Git(repourl='/home/mycure/infinit/horizon/.git',
                    workdir="build/horizon",
                    mode='update'))
factory.addStep(Git(repourl='/home/mycure/infinit/hole/.git',
                    workdir="build/hole",
                    mode='update'))
factory.addStep(Git(repourl='/home/mycure/infinit/lune/.git',
                    workdir="build/lune",
                    mode='update'))
factory.addStep(Git(repourl='/home/mycure/infinit/nucleus/.git',
                    workdir="build/nucleus",
                    mode='update'))
factory.addStep(Git(repourl='/home/mycure/infinit/oracle/.git',
                    workdir="build/oracle",
                    mode='update'))

from buildbot.config import BuilderConfig
from copy import deepcopy

c['builders'] = []
# XXX doStepIf=isGCCScheduler))

mingwFactory = deepcopy(factory)
mingwFactory.addStep(Configure(command=["./configure", "--win32"]))
mingwFactory.addStep(Compile(command=["make", "-C", "build/win32"]))

c['builders'].append(
    BuilderConfig(name="mingw",
      slavenames=["archlinux-32bit"],
      factory=mingwFactory))

gccFactory = deepcopy(factory)
gccFactory.addStep(Configure(command=["./configure", "--linux32"]))
gccFactory.addStep(Compile(command=["make", "-C", "build/linux32"]))

c['builders'].append(
    BuilderConfig(name="gcc",
      slavenames=["archlinux-32bit"],
      factory=gccFactory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "infinit"
c['titleURL'] = "http://www.infinit.io"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"
