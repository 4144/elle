#!/usr/bin/env python2
# -*- encoding: utf-8 -*-

import sys, os, hashlib

XML = """<?xml version="1.0" encoding="UTF-8"?>
<release major="%(major)s" minor="%(minor)s" rev="%(rev)s" size="%(size)d" human_size="%(human_size)s">
%(executables)s
</release>
"""

total_size = 0

if __name__ == '__main__':

    def add_to_manifest(dir_):
        global total_size
        bin_dir = os.path.join(dest_dir, dir_)
        assert os.path.isdir(bin_dir)
        binaries = os.listdir(bin_dir)
        for binary in binaries:
            print("add binary : %s" % binary)
            fpath = os.path.join(bin_dir, binary)
            if os.path.isdir(fpath):
                add_to_manifest(os.path.join(dir_, binary))
            else:
                with open(fpath) as f:
                    md5 = hashlib.md5(f.read()).hexdigest()
                size = os.path.getsize(fpath)
                total_size += size
                EXE_TAGS.append(
                    EXE_TAG % (dir_ + '/' + binary, size, md5)
                )
    dest_dir, major, minor, rev = sys.argv[1:]
    assert os.path.isdir(dest_dir)

    EXE_TAG = """\t<executable path="%s" size="%d" md5sum="%s" />"""
    EXE_TAGS = []

    for dir_ in ['bin', 'lib', 'python']:
        print("add directory binary : %s" % dir_)
        add_to_manifest(dir_)

    if total_size > 1000000:
        human_size = "%d Mb" % (total_size / (1024 * 1024))
    elif total_size > 1000:
        human_size = "%d Kb" % (total_size / 1024)
    else:
        human_size = "%d b" % total_size

    with open(os.path.join(dest_dir, "manifest.xml"), "w") as f:
        f.write(XML % {
            'major': major, 'minor': minor, 'rev': rev,
            'executables': '\n'.join(EXE_TAGS),
            'size': total_size,
            'human_size': human_size
        })


