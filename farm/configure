#!/usr/bin/env python3

import os
import subprocess
import sys
import platform

arch, osyst, comp = os.environ['BUILDFARM_NAME'].split('-')

template = '''\
#!/usr/bin/env python3

import os
import os.path
import sys

# Add drake in the Python path.
sys.path.insert(0, os.path.realpath(%(dir_source)r '/drake/src'))

import drake
import drake.cxx
import drake.cxx.boost

os.environ.update(%(environ)r)

cxx_toolkit = drake.cxx.GccToolkit(compiler = %(compiler)r)
cxx_config = drake.cxx.Config()
cxx_config.enable_debug_symbols()
cxx_config.enable_optimization(True)
# Needed on OSX ?
# cxx_config.warnings.overloaded_virtual = False

for f in %(flags)r:
  cxx_config.flag(f)

extra_args = {}

qt = %(qt)r
if qt is not None:
  import drake.cxx.qt
  qt = drake.cxx.qt.Qt(qt)
  extra_args['qt'] = qt

if %(arch)r == 'arm':
  cxx_toolkit_host =  drake.cxx.GccToolkit()
  extra_args['cxx_toolkit_host'] = cxx_toolkit_host


with drake.Drake(%(dir_source)r) as d:
  python = %(python)r
  import drake.valgrind
  valgrind = %(valgrind)r
  valgrind_tests = %(valgrind)r

  d.run(cxx_toolkit,
        cxx_config = cxx_config,
        python3 = python,
        valgrind = valgrind,
        valgrind_tests = valgrind_tests,
        production_build = %(production_build)r,
        **extra_args)
'''

parameters = {
  'compiler': None,
  'environ': {},
  'flags': (),
  'boost': None,
  'boost_shared': True,
  'python': None,
  'valgrind': False,
  'qt': None,
  'production_build': True,
  'arch': arch,
}

if osyst == 'android':
  parameters['compiler'] = '/root/arm-linux-androideabi-4.8/bin/arm-linux-androideabi-g++'
  parameters['python'] = False
  parameters['valgrind'] = False
elif osyst == 'linux_ubuntu_14':
  parameters['valgrind'] = True
elif osyst.startswith('linux_debian')
  pass
elif osyst == 'osx':
  parameters['compiler'] = 'clang++'
  parameters['environ'] = {'MACOSX_DEPLOYMENT_TARGET': '10.7'}
  parameters['flags'] = ('-ftemplate-depth=512', '-stdlib=libc++')
  parameters['python'] = '/usr/local/Frameworks/Python.framework/Versions/3.4'
elif osyst == 'win':
  parameters['compiler'] = '%s-w64-mingw32-g++' % arch
  parameters['boost_shared'] = False
  if arch == 'x86_64':
    parameters['python'] = '/home/buildslave/local/python-mingw-64'
  else:
    parameters['python'] = '/home/buildslave/local/python-mingw-32'
    if os.environ['PROJECT'] == 'Infinit':
      parameters['qt'] = '/home/buildslave/local/Qt-mingw-32'
else:
  raise Exception('invalid OS: %s' % osyst)


with open('%s/drake' % os.environ['DIR_BUILD'], 'w') as drake:
  parameters['dir_source'] = os.path.abspath(os.environ['DIR_SOURCE'])
  content = template % parameters
  print(content, file = drake)
  print(content)
