#!/usr/bin/env python3

import os
import subprocess
import sys
import platform

arch, osyst, comp = os.environ['BUILDFARM_NAME'].split('-')

template = ""
if osyst == 'osx':
  template = '''\
import os, sys
sys.path.insert(
    0,
    os.path.abspath(
        os.path.join(os.path.dirname(__file__), '../source/drake/src')
    )
)

import drake
import drake.cxx
import drake.cxx.boost

cxx_toolkit = drake.cxx.GccToolkit(compiler = 'clang++')
os.environ['MACOSX_DEPLOYMENT_TARGET'] = '10.7' # ensure that build is compatible with 10.7
cxx_config = drake.cxx.Config()

cxx_config.enable_debug_symbols()
cxx_config.enable_optimization(False)
cxx_config.flag('-ftemplate-depth=512')
cxx_config.flag('-std=c++11')
cxx_config.flag('-stdlib=libc++')
cxx_config.warnings.overloaded_virtual = False

boost = drake.cxx.boost.Boost(prefix = '/usr/local')
python3 = '/usr/local/Frameworks/Python.framework/Versions/3.2'

drake.run('../%s',
          cxx_toolkit,
          cxx_config,
          boost = boost,
          python3 = python3)
'''
elif osyst == 'win64':
  template = '''\
import os, sys
sys.path.insert(
    0,
    os.path.abspath(
        os.path.join(os.path.dirname(__file__), '../source/drake/src')
    )
)

import drake
import drake.cxx
import drake.cxx.boost

cxx_toolkit = drake.cxx.GccToolkit(compiler = 'x86_64-w64-mingw32-g++')
cxx_config = drake.cxx.Config()
cxx_config.enable_debug_symbols()
cxx_config.enable_optimization(False)
cxx_config.flag('-ftemplate-depth=512')
cxx_config.flag('-std=c++11')

boost = drake.cxx.boost.Boost(prefix = '/usr/local',
                              cxx_toolkit = cxx_toolkit)

drake.run('../%s',
          cxx_toolkit = cxx_toolkit,
          cxx_config = cxx_config,
          boost = boost,
)
'''
else:
  template = """\
import os, sys
sys.path.insert(
    0,
    os.path.abspath(
        os.path.join(os.path.dirname(__file__), '../source/drake/src')
    )
)

import drake
import drake.cxx
import drake.cxx.boost

cxx_toolkit = drake.cxx.GccToolkit()
cxx_config = drake.cxx.Config()

cxx_config.flag('-fPIC')
cxx_config.flag('-Wall')
cxx_config.flag('-W')
cxx_config.flag('-m64')
cxx_config.enable_debug_symbols()
cxx_config.enable_optimization(False)

import drake.valgrind
valgrind = drake.valgrind.Valgrind()

boost = drake.cxx.boost.Boost(prefix='%%s/local' %% os.environ['HOME'])

drake.run('../%s', cxx_toolkit, cxx_config, boost = boost, valgrind = valgrind)
"""


arch, osyst, compiler = os.environ['BUILDFARM_NAME'].split('-')

with open('%s/drake' % os.environ['DIR_BUILD'], 'w') as drake:
  print(template % os.environ['DIR_SOURCE'], file = drake)
