///
/// these macro functions are used to make using the Elle library
/// functionalities easier.
///

///
/// first includes Close.hh in order to undeclare everything.
///
#include <elle/idiom/Close.hh>

//
// ---------- dependencies ----------------------------------------------------
//

#include <cstdio>

#include <elle/types.hh>

//
// ---------- object ----------------------------------------------------------
//

#define _(...)                                                          \
  __VA_ARGS__

///
/// this macro generates the prototypes for the fundamental object
/// method.
///
/// for more information please refer to radix/Object.hh
///
#define declare(_type_)                                                 \
  _type_&               operator=(const _type_&);                       \
                                                                        \
  elle::Boolean   operator!=(const _type_&) const;                \
                                                                        \
  elle::Boolean   operator<=(const _type_&) const;                \
                                                                        \
  elle::Boolean   operator>=(const _type_&) const;

///
/// this macro function makes it easy for classes to derive from Object
/// as only a copy constructor and some operators such as ==, <, > etc.
/// must be manually written, should the class need to provide such
/// operators.
///
/// everything else, assignment, != operator, sizeof etc. are automatically
/// generated by the following.
///
#define embed(_type_, _template_)                                       \
  _template_                                                            \
  _type_&       _type_::operator=(const _type_&         object)         \
  {                                                                     \
    if (this == &object)                                                \
      return (*this);                                                   \
    if (this->Recycle(&object) == elle::Status::Error)                  \
      return (*this);                                                   \
                                                                        \
    return (*this);                                                     \
  }                                                                     \
                                                                        \
  _template_                                                            \
  elle::Boolean   _type_::operator!=(const _type_& object) const  \
  {                                                                     \
    return (!(this->operator==(object)));                               \
  }                                                                     \
                                                                        \
  _template_                                                            \
  elle::Boolean   _type_::operator<=(const _type_& object) const  \
  {                                                                     \
    return ((this->operator<(object) || this->operator==(object)));     \
  }                                                                     \
                                                                        \
  _template_                                                            \
  elle::Boolean   _type_::operator>=(const _type_& object) const  \
  {                                                                     \
    return ((this->operator>(object) || this->operator==(object)));     \
  }

//
// ---------- report ----------------------------------------------------------
//

///
/// this macro-function indicates that an error occured
/// and returns Status::Error.
///
#define escape(_format_, ...)                                           \
  throw elle::Exception(_format_, ##__VA_ARGS__)
