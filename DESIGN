Lorsqu'un writer ecrit, il faut pouvoir assurer que les permissions
ACL ne sont pas inventees mais sont bien correctes.

Qui dit correctes dit que le writer a pris les permissions courantes
au moment de l'ecriture.

1) Deja cela est verifiable, mais seulement par les noeuds de
 stockage ce qui n'est pas top car dans l'ideal on ne voudrait
 pas dissocier le processus de verification entre les noeuds
 clients et les noeuds de stockage.

Cela dit, on peut utiliser une propriete logique interessante.

Puisque c'est le proprietaire qui change les droits, on se
retrouve avec deux cas:

 (i) Le proprietaire effectue un changement de permissions,
     il change donc l'adresse du bloc ACL. Dans ce cas,
     l'adresse du bloc ACL du writer doit etre l'adresse
     de l'ancien bloc ACL.
 (ii) Un writer ecrit. Dans ce cas, il doit prendre l'adresse
      de l'ACL courant.

Cela dit, puisque dans le cas d'une ecriture, le writer
doit utiliser le bloc ACL courant, qui est deja reference
dans la partie "ACL courantes", il n'y a rien besoin de
faire.

Par contre, il faut que la partie du writer ait la bonne
adresse du bloc ACL une fois que les permissions sont
changees. Heureusement, c'est le proprietaire qui fait
cette action de changement de permissions. Nous
pouvons donc lui faire confiance.

En definitive, lors d'un ecriture, seule la zone de donnees
est signee et la partie ACL-writer est supprimee si elle
existait. Lors d'un changement de permission, le proprietaire
incrit le nouveau bloc ACL dans la partie ACL-data
et copie l'ancienne adresse ACL dans la partie ACL-writer.

---

Le processus de verification des noeuds de stockage est
deja different puisqu'ils verifient que le numero de version est
exactement superieur au precedent!!! On peut donc rajouter
des verifications supplementaires.

Rappelons que ce que nous voulons, c'est etre sur que la
Chain que le writer inclue au bloc represente bien toujours
les permissions dictees par l'ACL renseigne par le proprietaire
au moment de l'ecriture.

1) Lorsque l'ecriture a juste lieue---le numero Data::version
 change---les noeuds de stockage peuvent verifier que le
 premier bloc de Chain correspond bien au bloc ACL
 courant. Puisque la suite est une chaine (!!!normalement
 mais a verifier!!!) de blocs immuables, ca prouve que toutes
 les permissions sont les permissions theoriques.

 Rappelons que la Chain est une sequence de n-uplet
 (block, index). On pourrait, lors d'une ecriture, obliger
 les writers a n'indiquer que les index, de sorte que
 les adresses de blocs ne soient pas copies puisqu'ils
 sont deja references via les ACL courantes.

2) Si la ACL::version change, un changement de permissions
 a eu lieu. Puisque c'est le proprietaire qui le fait, on lui fait
 confiance. Une fois sa modification faite, il remplace
 l'adresse du bloc ACL courant et copie les adresses de
 blocs de l'ancien ACL dans la Chain. De plus la chaine
 peut etre signee pour assuree que c'est bien le proprietaire
 qui garantit que le writer a bien prouve qu'il avait le droit.

---

Pour eviter que l'ecrivain ne choisisse a qui il chiffre,
on peut faire en sorte qu'il mette le hash du password
au debut du bloc ACL.

Ainsi lorsque quelqu'un lit, si la clef (une fois dechiffree)
une fois hashee, ne correspond pas, on sait que l'ecrivain
a fait de la merde.
